#pragma once
#include<iostream>
#include<map>
#include<vector>
#include<algorithm>
#include<fstream>
#include<string>
#ifndef hyouka
using namespace std;
namespace satoshi {
	class Table {
	private:
		map<string, vector<string> > table;
		string f_name;
	public:
		Table();//创建表格的默认方法，可能被调用？
		~Table();//析构方法，将执行默认写入操作
		void write_table();//将table写入
		Table(vector<string>&cols, string filename);//创建空表格，到file
		Table(string filename);//从文件中读取表格
		void show_table();//展示表格
		void insert(vector<string>&vals);//向表格中插入vals
		void insert(vector<string>&cols, vector<string>&vals);//向指定的列插入vals
		template<typename pred>
		void del(pred func);//将满足func的行删除
		void del();//删除所有行
		void update(vector<string>&cols, vector<string>&vals);//将vcols的vals更新
		template<typename pred>
		void update(vector<string>&cols, vector<string>&vals, pred func);//将满足func的行的cols的vals更新
		void select(vector<string>&cols,bool distinct=false);//展示表格具体内容
		void select(int mode=0);//展示表格全部内容
		void sorted_select(vector<string>&cols, string judge_name, bool order = true);//有序展示表格内容
		template<typename pred>
		void select(vector<string>&cols, pred func);//展示表格满足func的内容
		void select(vector<string>&cols, string filename);//将表格中的部分cols写入文件
		void select(string filename);//将表格全部内容写入文件（重定义文件名）
	};
	class Database {
	private:
		map<string, Table> database;
		map<string, int> instructors;
		string cur_instructor
		int mode;
		void drop_table(string);
	public:
		void check_instructor();//检查instructors的正确性并设置mode
		void operation();//根据mode调用table方法，进行工作
	};
}

#endif // !hyouka
